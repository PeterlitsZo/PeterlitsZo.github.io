#date:init_time=2019/08/04;
今天也是元气满满的一天~
想要重载出可爱的Prl（指Peterlits）画风的类，就必须看看官方的QWidget类呀。
首先是定义：
    QWidget(parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = Qt.WindowFlags())
在C++中union是一种节省空间的储存方法，既一次只储存一个成员的信息，是一种非此既彼的储存方法，但是在Python中好像没有原生的Union，应该是Qt自己实现的吧......
来看看它的方法吧~（有到了学英语的时候了啊）：
    1.  acceptDrops(self) -> bool
        accept-接受，drops-放下。
        查找网上文件说是问widget接不接受放下事件......话说什么是放下事件哦......
    2.  accessibleDescription(self) -> str
        accessible-可接近的。
        又是不知所云欸......
    3.  accessibleName(self) -> str
    4.  actionEvent(self, QActionEvent)
        这个应该就是槽了吧，这个槽一般接收什么事件呢......
    5.  actions(self) -> List[QAction]
        什么意思啊？？？
    6.  activateWindow(self)
        activate-激活。
        很明显是一个过程，激活窗口的？嗯！
        欸......好奇怪哦，就只是不停的在任务栏闪而已嘛......这就是激活嘛......有用吗......又上网看了看，不懂的还是不懂（笑）
    7.  addAction(self, QAction)
        哦、插一句，刚刚发现QApplication继承至QWidget，但是他们好像却没有关系欸......
        这个是用来发信号的吗？
    8.  addActions(self, Iterable[QAction])
        姐妹花，两开花......
    9.  adjustSize(self)
        是过程欸，好像是？？？
        试了一下......有用？好像没有用呀......
    10. autoFillBackground(self) -> bool
        搞不懂，是激活了才是True？
    11. backgroundRole(self) -> QPalette.ColorRole
        role-作用，角色，palette-画板。
        可以待会看看ColorRole
    12. baseSize(self) -> QSize
        又是一个对象欸
    13. changeEvent(self, QEvent)
        触发事件吗......
    14. childAt(self, QPoint) -> QWidget
        对应点的子对象吗......
    15. childAt(self, int, int) -> QWidget
        同理同理欸。
    16. childEvent(...)
    17. childrenRect(self) -> QRect
        哈哈哈哈，children是child的复数哈哈哈，这个也太傻了吧。
        返回的是所有子对象的......区域吗？
    18. childrenRegion(self) -> QRegion
        region-范围。
        欸？！这个指范围那么rect是什么意思啊？
    19. clearFocus(self)
        好像只要没有对应的方法就会闪退？总之我也不知道这个方法到底是什么意思呢......
    20. clearMask(self)
    21. close(self) -> bool
    22. closeEvent(self, QCloseEvent)
    23. connectNotify(...)
        notify-通知。
        因为到底还是不知道这些单词背后实例化的意思，搞得我没懵逼呀。
    24. contentsMargins(self) -> QMargins
        margins-外边距。
    25. contentsRect(self) -> QRect
    26. contextMenuEvent(self, QContextMenuEvent)
        哎呀哎呀，说到底，content和context还是不一样的呀。
    27.contextMenuPolicy(self) -> Qt.ContextMenuPolicy
        好像......搞不懂欸......
    28. create(self, window: sip.voidptr = 0, initializeWindow: bool = True, destroyOldWindow: bool = True)
        搞不懂，还以为可以建一个新的窗口。
    29. createWindowContainer(QWindow, parent: QWidget = None, flags: Union[Qt.WindowFlags, Qt.WindowType] = 0) -> QWidget
        一定要看看WindowFlags到底是什么，嗯！
    30. cursor(self) -> QCursor
        ccursor-光标。
        这个是光标欸。
    31. customEvent(...)
    32. destroy(self, destroyWindow: bool = True, destroySubWindows: bool = True)
    今天就到这里吧，以后有时间再看看