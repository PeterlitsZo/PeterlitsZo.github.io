LaTeX学习手记03
=======================================
正文
---------------------------------------
先为之前挖的坑填一下。pic需要angles library。接下来又是熟悉的tikZ手记了。

### **TikZ学习手记**
#### 配置环境
使用\usetikzlibrary 来配置环境。LaTeX 和Plain TeX 关于这个命令的用法都是一样的。（但是ConTeXt 就不大一样了）

原文第一部分第三节是关于**图**的，使用了以下的library：
``` tex
\usetikzlibrary{arrows,decorations,pathmorphing,background,positioning,fit,petri}
```

#### nodes
与之前用node 来设置标签，添加字体不同，node有跟广泛的作用：作为一个节点。

所以，node 可以添加文本，设置形状，还可以获得一个小可爱的（并没有！）名字。
``` tex
\begin {tikzpicture}
    \path   (0,2) node [shape=circle,draw] {}
            (0,1) node [shape=rectangle,draw] {};
\end {tikzpicture}
```

当然，和其他的方法一样，`\path` 是最基本的方法，一般情况下不要用它，可以使用`\node` 来代替：
``` tex
%与它们含义相同：
%\path (0,0) node [shape=circle,draw] {};
%\path node at (0,0) [shape=circle,draw] {};
\node at (0,0) [circle,draw] {};
```

当然也与其他组件相同，它也有`draw` 和`fill` option。
``` tex
\begin{tikzpicture}
    [place/.style={circle,draw=blue!50,fill=blue!20,thick},
     transition/.style={rectangle,draw=black!50,fill=black!20,thick}]

    \node at ( 0,2) [place] {};
    \node at ( 0,1) [place] {};
    \node at ( 0,0) [place] {};
    \node at ( 1,1) [transition] {};
    \node at (-1,1) [transition] {};
\end{tikzpicture}
```

可以使用`minimun size` 来保证node 的大小，使用`inner sep` 来改变内部对象的大小（也同时可以改变node 的大小，但是从逻辑方面不推荐）。

使用圆括号为相关的node添加名字：
``` tex
\node (node 1) at (0,0) [place] {};
% or ...
\node [place] (node 2) at (0,2) {};
```

除了使用at 来制定位置，此外还有更多的、更直观的表达位置的方法：
``` tex
\node [place] (cir)                 {};
\node [place] (oth) [right=of cir]  {};
```

这种时候就有必须使用library `positioning` 了，两个node 之间的距离是由\node distance 决定的。而这个选项也是由`\on grid` 来影响的。

为node 打标签，添加文字，除了和之前一样用node 来写之外：
``` tex
\node [red,above] at (node 1.north) {$node 1$};
```

之外，还可以直接为对应node 打上标签：
```  tex
\node [place] (node 1) [left=of node 2,
                        label=above:$node 1$]{};
% 除了above 还可以用角度来表示：[label=60:$60^\circ$]
```

为了更改node 的标签颜色，可以使用：
``` tex
[every label/.style = {red}]
% or ...
[label={ [red]above:$node 1$ }]
% 使用大括号是为了防止编译程序认为"... ed]ab ..." 中的中括号是option 的截止符。
```

连接nodes：使用方位（如`node.west`）来标记起点/末点，跟之前说的一样，可以使用`..controls and ..`来设置控制点以画曲线。
``` tex
\draw [->] (node 1.west) ..control +(left:5mm) and +(up:5mm).. (node 2.north);
```

但是，node 的方位有时可以省略，因为tikz 足够聪明，一般情况下它知道该从那边连接到那边。

同时还可以继续简化下去：
``` tex
\draw [->] (node 1)     to [out=180,in=90]  (node 2);
```

可以使用控制点的角度来画线。

甚至还可以更简单一点，使用bend来控制角度，使用edge来画线（而不是用draw）

参考
---------------------------------------
- [1][官方网址](http://www.texample.net/media/pgf/builds/pgfmanual_3.0.1a.pdf)，[镜像(html文档下打开)](./resources/pdf/pgfmanual.pdf)，[镜像(md文档下打开)](../resources/pdf/pgfmanual.pdf)